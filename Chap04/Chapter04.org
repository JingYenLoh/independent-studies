#+TITLE: Chapter04
#+SUBTITLE: CRA
#+AUTHOR: Jing Yen Loh
#+EMAIL: lohjingyen.16@ichat.sp.edu.sg
#+DATE: June 2018

* create-react-app
Earlier, we manually created a HTML page and included the React libraries from a
CDN. That worked fine, but as you work on bigger projects you'll want to
integrate more things. You'll want to break up your code into logical sections,
you'll want an easy way to manage your dependencies, you'll want to integrate
minification of your code when ready to deploy, and so on. ~create-react-app~
(I'll refer to it as CRA from now on) is a command line tool, maintained by
Facebook, to generate React projects with a lot of the menial setup work
pre-configured for you. If you were following along the chapters, CRA should
already be installed on your system. Otherwise, visit Chapter 1 again for setup
instructions.

This chapter will be a short and sweet one. We'll just rewrite the previous Todo
List app in a project generated by CRA.

Since CRA is a command-line tool, you'll need to access it from the CLI.
Depending on your system, you can do the following:
- *Windows*: Press ~winkey + r~, type ~cmd.exe~, and press enter. This launches Command Prompt, a command-line interpreter on Windows.
- *MacOS*: Launch /Terminal.app/ from Spotlight search.
- *Linux*: Am I being mean by saying if you're using Linux, you'll already know what to do? :)

Now, ~cd~ to a directory you want to create your project in. For example, I have
a ~/Projects~ folder in my home directory I use to store my projects. So I'll cd
to it:
#+BEGIN_SRC sh
cd ~/Projects
#+END_SRC

/Author's note: The/ ~\~~ /character is often used to denote your home directory, a.k.a. a directory given to the current user to contain user specific files./

If you'd like to confirm you're in the right directory, the ~pwd~ command will
print the current directory you're in:
#+BEGIN_SRC sh
# Outputs the current working directory, a.k.a. directory you're in atm
pwd
#+END_SRC

To create a project using CRA, simply run the command ~create-react-app
<your-project-name>~. I'll name my project ~cra-todolist~, so I'll enter the
following command:
#+BEGIN_SRC sh
# Create a new project in the current directory named cra-todolist
create-react-app cra-todolist
#+END_SRC

CRA should run, and display some output on the console/terminal like this:

[[file:cra-init.PNG]]

Just give it a while, as the took downloads and runs the necessary files: After
a while, the command should complete and you'll see this:
#+BEGIN_EXAMPLE
Success! Created cra-todolist at <your-path>
Inside that directory, you can run several commands:

  yarn start
    Starts the development server.

  yarn build
    Bundles the app into static files for production.

  yarn test
    Starts the test runner.

  yarn eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can't go back!

We suggest that you begin by typing:

  cd cra-todolist
  yarn start
#+END_EXAMPLE

~cd~ into that folder and you'll find a whole bunch of files generated. We
should have something like this:
#+BEGIN_EXAMPLE
cra-todolist
├── README.md
├── node_modules
├── package.json
├── .gitignore
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── index.css
    ├── index.js
    ├── logo.svg
    └── registerServiceWorker.js
#+END_EXAMPLE

~node_modules~ contains the dependencies for this project. If you look inside
you'll find a whole bunch of folders inside. Each folder is a library by itself,
and you'll notice they have their own ~package.json~. 
