#+TITLE: Chapter 2
#+SUBTITLE: Hello, Modern JS!
#+AUTHOR: Jing Yen Loh
#+EMAIL: lohjingyen.16@ichat.sp.edu.sg
#+DATE: June 2018

#+BEGIN_QUOTE
(() => alert('ES2018+'))();
#+END_QUOTE

* Learning Objectives
- [ ] Provide high level overview to modern JS syntax
- [ ] Provide high level overview to tooling used in JS development

* Introduction
One major obstacle faced by Singapore Polytechnic's Diploma in Information
Technology students when attempting to learn React, as I've observed, is not due
to the complexity of the React library itself, which indeed is conceptually
lightweight compared to some JavaScript UI libraries out there, but rather
getting overwhelmed with new syntax and unfamiliar concepts. Indeed, oftentimes
documentation often assumes some familiarity with frontend JS development, as
React was not the first tool people reached for when building UIs.

It is even possible that the reader has been overwhelmed by my initial chapter.
At the time of writing, JavaScript is only briefly touched in DIT's syllabus and
is woefully inadequate to cope with the massive changes JS has seen over recent
years. This chapter attempts to fill those gaps enough that the reader may at
least read the React documentation without feeling like diving into a rabbit
hole.

/Author's note: I make effort to explain things to the best of my ability, but IMHO nothing quite beats diving into documentation and writing some code yourself. To that, I include necessary links in this Chapter, and I encourage them to be visited to clarify any doubts and solidify understanding./

* ES6 and Beyond
** Beginner Gotchas
Before even diving into modern JS, I feel the need to cover certain concepts and
gotchas for beginners.
*** ES...? Isn't this JavaScript?
The short answer is JavaScript usually refers to ECMAScript (ES for short), and
JS is simply the popular name to refer to ES. So that's something to bear in
mind if you chance upon the term while reading some documentation.

The long answer is ECMAScript is the Standard for the scripting language. ECMA
stands for European Computer Manufacturer's Association, and ECMAScript is a
standard they specified for a programming language. JavaScript is an
implementation of the ECMAScript standard. The "Java" part actually came from
marketing decision, and not really due to JS being a "script" version of the
Java programming language.

This is mostly trivia/history, but I've included it to avoid potential
confusion.
*** Semicolons
In JavaScript, semicolons are optional. Unlike Java or C#, where statements are
delimited by a semicolon, the JS interpreter can guess where to delimit a
statement. In fact, it is possible to write JS completely without semicolons,
similar to programming languages such as Python. In practise, however,
semicolons are still used, and even enforced for consistency.

/Author's note: For a while I enjoyed writing JS without semicolons, but eventually succumbed to semicolons, which also allows for modern features while remaining error free. Perhaps more on that another time./
*** Null and Undefined
In most programming languages, a ~null~ could refer to a value that does not
exist or an uninitialized variable. In JS, it's slightly different.

~undefined~ is a property without a definition. It typically means a variable
that has been declared but not defined, or a non-existent property in an object.
#+BEGIN_SRC js
let x; // x is declared but not defined with a value

console.log(x); // undefined

x = {}; // We'll now assign an empty Object to x

// x doesn't have a property called nonExistentProperty
console.log(x.nonExistentProperty); // undefined
#+END_SRC

~null~, however, means /nothing/. Unlike ~undefined~, which undefined variables
default to, ~null~ has to be assigned.
#+BEGIN_SRC js
let x; // x is declared but not defined with a value

console.log(x); // undefined

x = null;

console.log(x); // null
#+END_SRC

Why both ~null~ and ~undefined~? AFAIK, this was a flaw in the design of the
language, which is tricky to fix now.
** const and let
Traditionally, the ~var~ keyword was used for variable declarations.
#+BEGIN_SRC js
var pi = 3.14;
#+END_SRC

~const~ prevents the value of the constant from being changed through /re-assignment/.
#+BEGIN_SRC js
const answerToUniverse = 42;

try {
  answerToUniverse = 99;
  // expected output: TypeError: invalid assignment to const `number'
  // Note - error messages will vary depending on browser
} catch (e) {
  console.err(e);
}

console.log(answerToUniverse);
#+END_SRC

However, ~const~ doesn't magically make the value immutable. You simply can't
change the reference.
#+BEGIN_SRC js
const arr = [1, 2, 3, 4];

arr.push(5); // Valid code

console.log(arr); // [1, 2, 3, 4, 5];

// The ... operator clones and spreads the properties in arr.
const copy = [...arr, 6]; // [1, 2, 3, 4, 5, 6]

arr = copy; // TypeError: Assignment to constant variable
#+END_SRC

~let~ works similarly to ~var~, allowing you to reassign references.
#+BEGIN_SRC js
let x = 1;
console.log(x);

x = 'chicken';
console.log(x);
#+END_SRC

So if ~let~ works similarly, what's the purpose of it? Why not just use ~const~
with ~var~?

This is a bit of gotcha for JS beginners: variables in JS are actually /function
scoped/, meaning a ~var~ declaration allows for the variable to be accessible
within a function itself. That may have sounded confusing, so here's an example:

#+BEGIN_SRC js
function aThousand() {
  for (var i = 0; i < 1000; i++) {
    // Do nothing, just using a for loop to illustrate
  }
  console.log(i);
}

aThousand();
#+END_SRC

That actually outputs ~1000~, which was possible because the /scope/ of ~i~ was
the /function/ (~aThousand~) itself. Contrast that to the following example in
C#:
#+BEGIN_SRC csharp
int aThousand()
{
    for (var i = 0; i < 1000; i++)
    {
        // Do nothing
    }
    Console.WriteLine(i); // The name 'i' does not exist in the current context
}
#+END_SRC

That happens because ~i~ was /block scoped/, meaning that it existed within the
curly braces (~{}~). Blocks are a much more common way to scope variables (C,
C++, Java, C#, etc all use block scoping). Function scoping introduces a lot of
gotchas for people unfamiliar with it in JS, and thus ~const~ and ~let~
introduces block scoping to JS (besides ~const~'s immutable references).

/Author's note: I use/ ~const~ /almost exclusively, unless I know I'll explictly
need a mutable reference, in which case I use/ ~let~ /. I find it helps me reason about my code better./
** Default Parameters
Conceptually simple, but before that let's cover a JS beginner gotcha. Given the
following function:

#+BEGIN_SRC js
function greet(name) {
  console.log('Hello, ' + name + '!');
}

greet('Francis');
greet();
#+END_SRC

The first call would log ~Hello, Francis!~ to the console. What happens when we
call ~greet();~ though? Surprise: the code runs! In JS, it is possible to omit
arguments to functions if you do not intend to use them, and they will default
to ~undefined~, as evidenced by the second ~greet~ call.

We can override this default by providing a default parameter, which will be
used instead when the argument is ~undefined~:
#+BEGIN_SRC js
// Default parameter of 'nameless'
function greet(name = 'nameless') {
  console.log('Hello, ' + name + '!');
}

greet();
#+END_SRC

The above would output ~Hello, nameless!~. Default parameters are great for
leaving sane defaults in arguments that you know will be commonly passed.
** Classes
JavaScript's inheritance system is /Prototype-based/, which is a rather unique
aspect of the language. Unlike traditional class-based Object Oriented
programming langugas such as Java or C#, all JS Objects extend, or inherit from
a prototype, which in turn extends from its own prototype, and so on. This
continued link is known as the /prototype chain/, and the final prototype in
this link is ~null~.

To illustrate the chain, let's create an object with a single property of ~name~.
#+BEGIN_SRC javascript
let francis = { name: 'Francis' };

console.log(francis.name); // Francis
#+END_SRC

By using the ~{}~ syntax, the newly created ~francis~ has ~Object~ as its
prototype. When we invoke the following:
#+BEGIN_SRC javascript
console.log(francis.toString()); // [object Object]
#+END_SRC

~francis~ itself doesn't have a method called ~toString~, so JavaScript goes up
the prototype chain and the first thing it sees its ~Object~. ~Object~ does have
a ~toString~ method, so that is invoked. Here's an illustration of what the
prototype chain looks like:
#+BEGIN_EXAMPLE
francis ---> Object.prototype ---> null
#+END_EXAMPLE

If we were to define ~toString~ on ~francis~ itself, however, there wouldn't be
a need to traverse up the prototype chain anymore. This could be viewed as
something similar to method overriding in traditional class based OOP languages.
#+BEGIN_SRC javascript
francis.toString = function () {
  return this.name;
}

console.log(francis.toString()); // Francis
#+END_SRC

Similarly, JS arrays inherit from an ~Array.prototype~, which in turn inherits
from ~Object.prototype~, so the following would have a prototype chain of:
#+BEGIN_SRC javascript
const arr = ['francis', 'is', 'ajax'];
// arr ---> Array.prototype ---> Object.prototype ---> null
#+END_SRC

To keep create objects with similar properties, we write functions with that
bind properties and call the function with the ~new~ keyword. These functions
are often called /constructor functions/. Here's an example ripped off from MDN:
#+BEGIN_SRC javascript
function Rectangle(height, width) {
  this.height = height;
  this.width = width;
}
#+END_SRC

We then call the ~Rectangle~ function with the ~new~ keyword:
#+BEGIN_SRC javascript
// Creates a Rectangle object with height of 3 and width of 4
const rectangle = new Rectangle(3, 4);

console.log(rectangle.height); // 3
console.log(rectangle.width); // 4
#+END_SRC
The ~new~ is necessary because it binds the context of ~this~ to the newly
created object, and sets the ~constructor~ property of the created object to
~Rectangle~. Without it, ~this~ actually refers to whatever is invoking it, and
ends up adding ~height~ and ~width~ properties of 3 and 4 to it!

If we modify the properties of ~Rectangle~ directly, the ~rectangle~ object will
get the new properties as well:
#+BEGIN_SRC javascript
Rectangle.prototype.name = 'Rectangle';

console.log(rectangle.name); // Rectangle
#+END_SRC

The ~class~ keyword, introduced in ES2015, is simply syntactic sugar over the
existing prototype-based inheritance shown above. They actually caused a little
controversy when introduced, as people believed it "hid" the prototype-based
inheritance underneath from newer developers, something quite different from the
standard class based OOP people have come to expect from the ~class~ keyword.

My job here isn't to take a stance in the debate, but to give an overview of
this language feature, since after all, React uses the class syntax for components.

You can create classes using the ~class~ keyword:
#+BEGIN_SRC javascript
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }

  getArea() {
    return this.height * this.width;
  }
}
#+END_SRC

Then instantiate an object of this class using the ~new~ keyword:
#+BEGIN_SRC javascript
let rectangle = new Rectangle(3, 4);

console.log(rectangle.getArea()); // 12
#+END_SRC

You're able to ~extend~ from this class as well, which is similar to the classic
inheritance from OO languages:
#+BEGIN_SRC javascript
class Square extends Rectangle {
  constructor(sideLength) {
    super(sideLength, sideLength);
  }
}
#+END_SRC

And objects of this class have the properties of the parent class as well:
#+BEGIN_SRC javascript
let square = new Square(4);

console.log(square.getArea()); // 16
#+END_SRC

In React, you'll create your own components by extending the React ~Component~:
#+BEGIN_SRC javascript
import React from 'react';

class MyCoolComponent extends React.Component {
  render() {
    return (
      <div>
        <h1>A cool component!</h1>
      </div>
    );
  }
}
#+END_SRC
Underneath the hood, ~MyCoolComponent~ gets the properties of React's
~Component~ class, which is how React knows how to work with your components. 

There's a good deal I haven't covered about classes, but this should be enough
for a working introduction to React. We'll learn more along the way.

** Destructuring
One of my favorite language features. Before we proceed, let's clear up some
terminology. Here's a JavaScript Object.

#+BEGIN_SRC js
const person = {
  name: 'Francis',
  gender: null
};
#+END_SRC

~person~ is an identifier for the Object, which consists of 2 /keys/, each with
a corresponding /value/.

| key    | value   |
|--------+---------|
| name   | Francis |
| gender | null    |

It's common to be writing code like the following:
#+BEGIN_SRC js
const name = person.name;
#+END_SRC


Destructuring allows you to extract the /key/ and assign it to a variable
simultaneously:
#+BEGIN_SRC js
const { name } = person;
#+END_SRC

Multiple keys are fine too:
#+BEGIN_SRC js
const { name, gender } = person;
#+END_SRC

Destructuring works on Arrays as well:
#+BEGIN_SRC js
const [first, second, ...rest] = [1, 2, 3, 4, 5];

console.log(first); // 1
console.log(second); // 2
console.log(rest); // [3, 4, 5]
#+END_SRC

As well as Modules, which we'll cover later. In fact, you'll frequently see the
following examples in React:
#+BEGIN_SRC js
// You're extracting Component directly from the 'react' import
import React, { Component } from 'react';

class ButtonComponent extends Component {
  // ...
}
#+END_SRC

#+BEGIN_SRC js
// Without the destructuring, it would be like the following:
import React from 'react';

class ButtonComponent extends React.Component {
  // ...
}
#+END_SRC

I particularly like destructuring function arguments, especially with React
components:
#+BEGIN_SRC js
let TodoItem = ({ taskName, isDone }) => (
  <li>
    <p>{taskName}</p>
    <input type="checkbox" value={isDone} />
  </li>
);

// VERSUS
TodoItem = (props) => (
  <li>
    <p>{props.taskName}</p>
    <input type="checkbox" value={props.isDone} />
  </li>
);
#+END_SRC
** Spread
As stated in the Destructuring example above, it's good to think of JS objects
as a /collection/ of key value pairs.

#+BEGIN_SRC js
const person = {
  name: 'Francis',
  gender: null
};
#+END_SRC

By this analogy, ~person~ is a /collection/ with ~name: Francis~ and ~gender:
null~ pairs.

| key    | value   |
|--------+---------|
| name   | Francis |
| gender | null    |

Like the term collection would imply, you can iterate over it:
#+BEGIN_SRC javascript
let person = {
  name: 'Francis',
  gender: null,
};

for (let [key, value] of Object.entries(person)) {
  console.log(`${key}: ${value}`);
}
#+END_SRC

Let's pause a little. In JavaScript, it's common to want to clone an object and
modify the clone instead of modifying the object directly. One way to "clone"
objects would be like this:
#+BEGIN_SRC javascript
const person = {
  name: 'Francis',
  gender: null,
};

const francisClone = {
  name: person.name,
  gender: person.gender,
};

francisClone.commitCount = 500;

// person object remains untouched
// francisClone has a commitCount property now
#+END_SRC

Particularly in React, where you'll be calling a ~setState~ function often,
which takes in a new updated object. More on that in the next chapter.

Since cloning is such a common operation, though, APIs were added to help with
copying properties, such as ~Object.assign~:
#+BEGIN_SRC javascript
const francis = {
  name: 'Francis',
  gender: null,
};

const francisClone = Object.assign({}, francis);

console.log(francisClone.name, francisClone.gender); // Francis null
#+END_SRC

~Object.assign~ takes in an object to clone to, which in the example above was
an empty object with no properties, and a /variable/ number of objects, meaning
it can clone properties from an arbitrary number of objects. Here's a modified
example from MDN:
#+BEGIN_SRC javascript
const object1 = {
  a: 1,
  b: 2,
  c: 3
};

const object2 = Object.assign({c: 4, d: 5}, object1);
// Object.assign accepts an arbitrary number of objects to clone from
const object3 = Object.assign({c: 4, d: 5}, object1, { e: 6, f: 7 }, { g: 8 }, { a: 9 });

console.log(object2.c, object2.d); // 3 5
console.log(object3.e, object3.a); // 6 9
#+END_SRC
You'll notice that properties get overwritten if the same properties show up.
The properties are cloned from /left to right/, so they're overwritten if the
same keys show up, e.g. ~object2~ had its ~c~ overwritten by ~object1~'s ~c~ of
~3~, and ~object3~ initially had ~a: 1~ coming from ~object1~, which was
overwritten by the final ~{ a: 9}~ at the end of the arguments.

~Object.assign~ does a /shallow clone/, which is a cool term for for saying it
only copies the /reference/ if the source value. Once again, example ripped off
from MDN, because that's the best place for learning these features (seriously):
#+BEGIN_SRC javascript
let obj1 = { a: 0 , b: { c: 0}};
let obj2 = Object.assign({}, obj1);
console.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}

obj1.a = 1;
console.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}
console.log(JSON.stringify(obj2)); // { a: 0, b: { c: 0}}

obj2.a = 2;
console.log(JSON.stringify(obj1)); // { a: 1, b: { c: 0}}
console.log(JSON.stringify(obj2)); // { a: 2, b: { c: 0}}

obj2.b.c = 3;
console.log(JSON.stringify(obj1)); // { a: 1, b: { c: 3}}
console.log(JSON.stringify(obj2)); // { a: 2, b: { c: 3}}

// Deep Clone
obj1 = { a: 0 , b: { c: 0}};
let obj3 = JSON.parse(JSON.stringify(obj1));
obj1.a = 4;
obj1.b.c = 4;
console.log(JSON.stringify(obj3)); // { a: 0, b: { c: 0}}
#+END_SRC

But I digress. Back to topic.

Since shallow cloning is such a common operation, syntactic sugar was added to
make it easier to write. The spread operator, which looks like ~...~, allows for
a concise way to write many of these cloning codes. Here's an earlier example
rewritten:
#+BEGIN_SRC javascript
const object1 = {
  a: 1,
  b: 2,
  c: 3,
};

const object2 = { c:4, d: 5, ...object1 };
#+END_SRC

Works for lists too:
#+BEGIN_SRC javascript
const arr = [1, 2, 3, 4];

const newArr = [0, ...arr, 5]; // [0, 1, 2, 3, 4, 5]
#+END_SRC

Note that if you just wanted to clone an object, it's simply a matter of:
#+BEGIN_SRC javascript
const clonedObj = { ...obj };
#+END_SRC

This just creates a new object by cloning 2 objects. Nothing really different,
just an example for you to visualize what this operator is capable of:
#+BEGIN_SRC javascript
const person = {
  name: 'Francis',
  gender: null,
};

const course = {
  courseName: 'DIT',
  school: 'DMIT',
};

const student = { ...person, ...course };

// {"name":"Francis","gender":null,"courseName":"DIT","school":"DMIT"}
console.log(JSON.stringify(student));
#+END_SRC

More docs and examples available at:
- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Deep_Clone#Deep_Clone][MDN Object.assign]]
- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax][MDN Spread syntax]]
** Modules (not really ES6)
JS was initially designed for simple interactions on the client side, and thus
the original designers did not see the need for a module system. As the
complexity of web applications grew, however, splitting up pieces of code became
essential. Specifications like CommonJs and Asynchronous Module Definition (AMD)
rose to deal with the problem.

Eventually, the ECMA committee decided to tackle this issue as well, and the
result was ES2015 Modules.
#+BEGIN_SRC js
// -- math.js
export const PI = 3.1415;

export function areaOfCircle(r) {
  return PI * r * r;
}

const Math = {
  PI,
  areaOfCircle,
};

export default Math;

// -- index.js
import Math from './math.js'; // The default export is brought in

console.log(Math.areaOfCircle(5)); // 78.5375
#+END_SRC

An ~export~ keyword allows something to be exported, and an ~import~ brings it
into the current namespace.

Imports can be destructured, and you'll commonly see it in React:
#+BEGIN_SRC js
// continued example
import { areaOfCircle } from './math.js';

// React example
import React, { Component } from 'react';
#+END_SRC

You can give your imports a custom namespace using an ~as~:
#+BEGIN_SRC js
// continued example
import * as Api from './math.js';

console.log(Api.PI);

// React/Redux example
import { TodosReducer as Todo } from './TodosReducer.js';
#+END_SRC

There are several nuances with modules, and frankly the [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import][MDN documentation]] covers
it much better than my brief summary here. Rather than reinventing the wheel, I
encourage the reader to visit the documentation instead.
** TODO Promises

* Common tooling
** Babel
JavaScript is continually evolving as a language, and new features are
constantly being added. /Proposals/ are written for new features, where it goes
through several stages of a proposal process, and gets finalized into the
language specifications if it gets accepted.

Babel is a JavaScript compiler (some call it transpiler) which supports the
latest language features. It takes in next generation JavaScript (with features
that're currently in proposals and not part of the spec yet) and churns out
JavaScript that's supported in browsers. Babel does this through plugins that
transform the syntax.

You're most likely already using Babel if you're using JSX. Babel takes
something with JSX...
#+BEGIN_SRC js
const HelloComponent = <Text>Hello!</Text>;
#+END_SRC

and transforms it into something like this:
#+BEGIN_SRC js
const HelloComponent = React.createElement(
  Text,
  null,
  "Hello!",
);
#+END_SRC

Surprise! Turns out JSX isn't actually part of JavaScript, but rather a Babel
enabled feature for you to write XML looking UIs which gets transpiled into
JavaScript functions.

Besides JSX, ~create-react(-native)-app~ generated projects usually incorporate
some experimental languages features (a.k.a. still in proposal). At the time of
writing, this includes features like [[https://github.com/tc39/proposal-static-class-features/][static class features]] and [[https://github.com/tc39/proposal-dynamic-import][dynamic import]].
** Webpack
Webpack describes itself as a /static module bundler/ for modern JavaScript
applications, which means it bundles up the modules in your app ¯\_(ツ)_/¯.
These "modules" could be your JavaScript files, HTML files, CSS files, etc. By
default, webpack only works with JavaScript files, but /loaders/ can be added to
allow webpack to work with other filetypes, such as the abovementioned HTML and
CSS, or even CSS preprocessors, and automagically compile them into CSS for you.

Under the hood, webpack works by building a /dependency graph/ of your project.
It begins this by traversing your project, starting from an /entry/ point, so
you'll see webpack configs with an ~entry~ key e.g.
#+BEGIN_SRC javascript
module.exports = {
  entry: './path/to/your/entry/file.js'
};
#+END_SRC

From here, webpack traverses through your project, noting the /dependencies/ of
your project e.g. your ~import~ statements, and produces an output
bundle, or bundles, depending on the configuration.

Webpack is also capable performing other tasks, with common examples such as
bundle optimization, asset management and injection of environment variables.
These tasks can be enabled through /plugins/.

I won't be covering much on webpack, but it's important that you know
~create-react-app~ uses webpack under the hood to bundle up your project.
